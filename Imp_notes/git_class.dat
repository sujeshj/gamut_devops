Day-1
======
# What is VCS. Why we need VCS.
	VCS features.

#
GIT Installation (Ubuntu):
$ sudo apt-get update
$ sudo apt-get install git

Verify Installation:
	which git
	git --version

GIT Uninstallation:
$ sudo apt-get remove git



#
Git Architecture Diagram
	- Centralized -  SVN/CVS/Clearcase/Perforce
	- Distributed -  GIT/Bitkeeper


Day-2
======
Creating remote repository in github
===============
1. create an account in github.com
	URL: https://github.com

2. login to your 	
	click on "new repository" --> give a name "flipkart-ecomerce" --> "create reopository" 

3. copy the repo URL from Github:
	https://github.com/nageshvkn/flipkart-ecomerce.git

4. Clone the source code from remote repository using 'git clone' command
	git clone https://github.com/nageshvkn/flipkart-ecomerce.git

5. cd flipkart-ecomerce	 and observe .git folder. ".git" is called as "Local Reposiotory".

6. Create some sample code and submit the code to remote repo.
	--> touch Login.java
	--> git add Login.java
	--> git commit Login.java -m "login module code"
	--> git push

	--> git log Login.java


#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "Nageswara Rao P"
$ git config --global user.email "nageshvkn@gmail.com"

--
Check the configurations using below command
$ git config --list

Git stores all configurations in below file
"/home/gamut/.gitconfig"

Day-3
======
# Understand Git Jargon.
	- Remote Repository
	- Working Directory
	- Local Repository
	- Master Branch
	- Stage/"Stagin Index"

#Setting up Local repository
1. create/initialize a local repository with 'git init' command
$ git init gamutkart

2. Observe the local repository
ls -a (you can see the .git folder. this is called the "local repository")

3.
create some source code.. ex: vim Login.java

4.
Adding the file to STAGE.
$ git add Login.java

5.
Commiting the file to local repository
$ git commit Login.java -m "lgoin module code"

6.
Check the log of Login.java using log command.
$ git log Login.java


==revisioning in git==
==commit structure==

Day-4
======
# History - Deep Dive
	$ git log Login.java

	Options:
		- git log <filename>
		- git log -n2
		- git log --author="nageshvkn"
		- git log --since="2016/12/13"
		- git log --until="2016/12/13"
		- git log --grep="DB code"		
		- git log --oneline

#Qn.
Show me all logs committed by user called "Ram"AND has a commit message "math function" in it.

$ git log --author="Ram" --grep="math function"

#
SHA-1 / SHA value / Checksum / commit Id / Version / Revision

Day-5
=====
# GIT Commands
1. 
git diff Login.java

2.
git diff --staged Login.java

3. Deleting a file

	A.) git rm OMS.java
	    git commit OMS.java -m "comment"
	 
4. Renaming a file/folder
	A.) git mv Login.java Login1.java
		git commit
			
#
Carry the history.
	- git log --follow Login.java
#
HEAD

Day-6
=======
# BRANCHING
	A. What is a branch?
	B. Why and When we create a branch?
	C. Branching Stratogy overview
	
# List all the branches
	$ git branch

		
# Creating a new branch
	$ git branch dev_1.2.3
		
# Switching from one branch to another
	$ git checkout dev_1.2.3
		
# Creating and switching to a newly created branch
	$ git checkout -b dev_1.2.4

# Verify the commits in multiple branches

Day-7
======
# Skip staging
	git commit -am "submit all pending changes"

Note: you need to commit all the files when you skip the staging.

# Undoing the changes:
undo/revert local changes from source area-->
	git checkout -- LoginWeb.java



Unstage the changes from STAGE area-->
	git reset HEAD LoginWeb.java

#
git show <SHA>
git show b85a6e123
 - Shows files/directories that are commited as part of a
   check-in. Also shows the code changes.


Day-8
======
Merging:
=========
# FAST-FORWARD MERGE

BEFORE MERGE:
-------------
			master
			 |
----C1--C2---C3
				|
				----------C4----C5  
								dev_1.2.3
		
AFTER MERGE:
-------------
 			     			master
			     			  |
----C1----C2---C3------C4----C5
		             		  |
			     			dev_1.2.3


Excercise:
===========
git branch
git branch dev_1.2.3
git commit (just to have C4 & C5)

git checkout master
git merge dev_1.2.3


MERGING CONFLICT:
=================
#
Merge:
git checkout master
git merge dev_1.2.3

#
Conflict:
If two users modify the same file in source and target branches and if the same line has different content, git can't decide which user's code it has to take. we call this situation as conflict.

#
Resolve Conflict: 
- open the conflict file--> remove conflict markers-->select the right content.
- git add
- git commit


#	
git remote
	PULL
	FETCH
	PUSH


NOTES:
SVN & Git differences:
==========================
1.
SVN is a centralised version control system. In svn, when a user checkoutâ€™s the repository, he will get only the source code. Repository is not distributed to the user. In SVN multiple users connect to a single/centralized server. If that server goes down, no user will be able to work.

	Where as Git is distributed VCS. In the sense, when user clones the repository, he will get source code as well as complete repository on his local disk. since repository is distributed across multiple users and each user has their own local repository, user will be able to submit the changes locally without connecting to the master server. (i.e he can also work offline)

2.
Git has staging area. Users can leverage this staging area to stage/save all the changes related to some issue/bug and  commit everything at once into local repository. hence, all the changes will be recorded as part of single sha/commit. user's get an opportunity to logically group the changes and commit as single changeset. this enables better tracking.

3.
Since git is distributed in nature, almost all transactions happen locally in the client machine and hence less overhead on the server so git is faster. Users are free to create any no. branches in Git. where as in svn all branches reside in server side, so may cause svn to be odverloaded with multiple requests.

4.
Git seems to be good with merging.

5.
Git stores each change as SHA values but SVN uses simple numbers as revisions.



